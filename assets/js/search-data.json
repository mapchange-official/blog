{
  
    
        "post0": {
            "title": "From the GCP",
            "content": "{ &quot;tags&quot;: [ &quot;remove_input&quot;, ] } #Hide code input from google.cloud import bigquery client = bigquery.Client() query = &quot;&quot;&quot; select election_cycle, sum(dem_predicted) as dem_predicted from `nyu-cap-ae.final.tableau_final_market` group by 1 limit 100; &quot;&quot;&quot; query_job = client.query(query) #Make an API request print(&quot;The Query Data:&quot;) for row in query_job: print(&quot;name={}, count={}&quot;.format(row[0], row[&quot;dem_predicted&quot;])) . The Query Data: name=2018, count=2348452.0 name=2020, count=2152852.0 name=2016, count=1833835.0 name=2022, count=3461406.0 . Trying a data viz . import matplotlib.pyplot as plt; plt.rcdefaults() import numpy as np import matplotlib.pyplot as plt objects = (&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;Perl&#39;, &#39;Scala&#39;, &#39;Lisp&#39;) y_pos = np.arange(len(objects)) performance = [10,8,6,4,2,1] plt.bar(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.xticks(y_pos, objects) plt.ylabel(&#39;Usage&#39;) plt.title(&#39;Programming language usage&#39;) plt.show() .",
            "url": "https://blog.mapchange.com/fastpages/jupyter/2022/02/05/testing-vertex-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/02/05/testing-vertex-notebook.html",
            "date": " • Feb 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "New Blog Who Dis?",
            "content": "Testing writing a post from scratch. . The goals of this test are the following: . Can I connect to GCP/BigQuery to pull data into the notebook? Yes | How does the formatting look once published? Is it acceptable? Yes, and you can hide sensitive code | What happens if there are open comments on the notebook when published? Do they show? They remain in Deepnotes, but don&#39;t show in the blog post. | How can I more effectively save a post here and publish to the appropriate file location on GitHub for Fastpages? Can I save directly? And does the publishing action on GitHub fire automatically? Deepnote can sync with GitHub. Additional folders/files not in the Fastpages file schema don&#39;t seem to be able to be puhed. The GitHub Actions fire automatically to update the posts. | from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&quot;javascript:code_toggle()&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Click here to toggle on/off the raw code.&quot;&gt;&lt;/form&gt;&#39;&#39;&#39;) import json import os from google.oauth2 import service_account from google.cloud import bigquery bq_credentials = service_account.Credentials.from_service_account_info( json.loads(os.environ[&#39;MAPCHANGE_BIGQUERY_CONNECTION_SERVICE_ACCOUNT&#39;])) client = bigquery.Client(credentials=bq_credentials, project=bq_credentials.project_id) . df_1 = _deepnote_execute_sql(&quot;&quot;&quot;from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&quot;javascript:code_toggle()&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Click here to toggle on/off the raw code.&quot;&gt;&lt;/form&gt;&#39;&#39;&#39;) select election_cycle, sum(dem_predicted) from `nyu-cap-ae.final.tableau_final_market` group by 1 limit 100; &quot;&quot;&quot;, &#39;SQL_A68E38DE_5115_4DF4_BA9E_46073050F7D2&#39;) df_1 . BadRequest Traceback (most recent call last) /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/cursor.py in _execute(self, formatted_operation, parameters, job_id, job_config, parameter_types) 202 try: --&gt; 203 self._query_job.result() 204 except google.cloud.exceptions.GoogleCloudError as exc: /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/job/query.py in result(self, page_size, max_results, retry, timeout, start_index) 1265 try: -&gt; 1266 super(QueryJob, self).result(retry=retry, timeout=timeout) 1267 /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/job/base.py in result(self, retry, timeout) 678 kwargs = {} if retry is DEFAULT_RETRY else {&#34;retry&#34;: retry} --&gt; 679 return super(_AsyncJob, self).result(timeout=timeout, **kwargs) 680 /shared-libs/python3.7/py/lib/python3.7/site-packages/google/api_core/future/polling.py in result(self, timeout, retry) 134 # Pylint doesn&#39;t recognize that this is valid in this case. --&gt; 135 raise self._exception 136 BadRequest: 400 Syntax error: Expected end of input but got keyword FROM at [1:1] (job ID: d641b9df-ff28-4822-9ec8-e8044a117834) --Query Job SQL Follows-- | . | . | . | . | . | . | . | . | . | . | . | . | 1:from IPython.display import HTML 2: 3:HTML(&#39;&#39;&#39;&lt;script&gt; 4:code_show=true; 5:function code_toggle() { 6: if (code_show){ 7: $(&#39;div.input&#39;).hide(); 8: } else { 9: $(&#39;div.input&#39;).show(); 10: } 11: code_show = !code_show 12:} 13:$( document ).ready(code_toggle); 14:&lt;/script&gt; 15:&lt;form action=&#34;javascript:code_toggle()&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Click here to toggle on/off the raw code.&#34;&gt;&lt;/form&gt;&#39;&#39;&#39;) 16: 17: 18:select election_cycle, sum(dem_predicted) 19:from `nyu-cap-ae.final.tableau_final_market` 20:group by 1 21:limit 100; | . | . | . | . | . | . | . | . | . | . | . | . | During handling of the above exception, another exception occurred: DatabaseError Traceback (most recent call last) /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1802 self.dialect.do_execute( -&gt; 1803 cursor, statement, parameters, context 1804 ) /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 731 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 732 cursor.execute(statement, parameters) 733 /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/_helpers.py in with_closed_check(self, *args, **kwargs) 308 raise exc_class(exc_msg) --&gt; 309 return method(self, *args, **kwargs) 310 /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/cursor.py in execute(self, operation, parameters, job_id, job_config) 166 self._execute( --&gt; 167 formatted_operation, parameters, job_id, job_config, parameter_types 168 ) /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/cursor.py in _execute(self, formatted_operation, parameters, job_id, job_config, parameter_types) 204 except google.cloud.exceptions.GoogleCloudError as exc: --&gt; 205 raise exceptions.DatabaseError(exc) 206 DatabaseError: 400 Syntax error: Expected end of input but got keyword FROM at [1:1] (job ID: d641b9df-ff28-4822-9ec8-e8044a117834) --Query Job SQL Follows-- | . | . | . | . | . | . | . | . | . | . | . | . | 1:from IPython.display import HTML 2: 3:HTML(&#39;&#39;&#39;&lt;script&gt; 4:code_show=true; 5:function code_toggle() { 6: if (code_show){ 7: $(&#39;div.input&#39;).hide(); 8: } else { 9: $(&#39;div.input&#39;).show(); 10: } 11: code_show = !code_show 12:} 13:$( document ).ready(code_toggle); 14:&lt;/script&gt; 15:&lt;form action=&#34;javascript:code_toggle()&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Click here to toggle on/off the raw code.&#34;&gt;&lt;/form&gt;&#39;&#39;&#39;) 16: 17: 18:select election_cycle, sum(dem_predicted) 19:from `nyu-cap-ae.final.tableau_final_market` 20:group by 1 21:limit 100; | . | . | . | . | . | . | . | . | . | . | . | . | The above exception was the direct cause of the following exception: DatabaseError Traceback (most recent call last) &lt;ipython-input-2-dc117ecb685f&gt; in &lt;module&gt; 20 group by 1 21 limit 100; &gt; 22 &#34;&#34;&#34;, &#39;SQL_A68E38DE_5115_4DF4_BA9E_46073050F7D2&#39;) 23 df_1 /shared-libs/code/sql_utils.py in _deepnote_execute_sql(template, sql_alchemy_json_env_var) 37 try: 38 return _deepnote_execute_sql_on_engine( &gt; 39 engine, query, bind_params, requires_duckdb 40 ) 41 finally: /shared-libs/code/sql_utils.py in _deepnote_execute_sql_on_engine(engine, query, bind_params, requires_duckdb) 52 53 try: &gt; 54 return pd.io.sql.read_sql_query(query, con=connection, params=bind_params) 55 except ResourceClosedError: 56 # this happens if the query is e.g. UPDATE and pandas tries to create a dataframe from its result /shared-libs/python3.7/py/lib/python3.7/site-packages/pandas/io/sql.py in read_sql_query(sql, con, index_col, coerce_float, params, parse_dates, chunksize) 392 coerce_float=coerce_float, 393 parse_dates=parse_dates, --&gt; 394 chunksize=chunksize, 395 ) 396 /shared-libs/python3.7/py/lib/python3.7/site-packages/pandas/io/sql.py in read_query(self, sql, index_col, coerce_float, parse_dates, params, chunksize) 1306 args = _convert_params(sql, params) 1307 -&gt; 1308 result = self.execute(*args) 1309 columns = result.keys() 1310 /shared-libs/python3.7/py/lib/python3.7/site-packages/pandas/io/sql.py in execute(self, *args, **kwargs) 1174 def execute(self, *args, **kwargs): 1175 &#34;&#34;&#34;Simple passthrough to SQLAlchemy connectable&#34;&#34;&#34; -&gt; 1176 return self.connectable.execution_options().execute(*args, **kwargs) 1177 1178 def read_table( /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in execute(self, statement, *multiparams, **params) 1277 params, 1278 _EMPTY_EXECUTION_OPTS, -&gt; 1279 future=False, 1280 ) 1281 /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _exec_driver_sql(self, statement, multiparams, params, execution_options, future) 1583 execution_options, 1584 statement, -&gt; 1585 distilled_parameters, 1586 ) 1587 /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1844 except BaseException as e: 1845 self._handle_dbapi_exception( -&gt; 1846 e, statement, parameters, cursor, context 1847 ) 1848 /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context) 2025 elif should_wrap: 2026 util.raise_( -&gt; 2027 sqlalchemy_exception, with_traceback=exc_info[2], from_=e 2028 ) 2029 else: /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/util/compat.py in raise_(***failed resolving arguments***) 205 206 try: --&gt; 207 raise exception 208 finally: 209 # credit to /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, execution_options, *args, **kw) 1801 if not evt_handled: 1802 self.dialect.do_execute( -&gt; 1803 cursor, statement, parameters, context 1804 ) 1805 /shared-libs/python3.7/py/lib/python3.7/site-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context) 730 731 def do_execute(self, cursor, statement, parameters, context=None): --&gt; 732 cursor.execute(statement, parameters) 733 734 def do_execute_no_params(self, cursor, statement, context=None): /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/_helpers.py in with_closed_check(self, *args, **kwargs) 307 if getattr(self, closed_attr_name): 308 raise exc_class(exc_msg) --&gt; 309 return method(self, *args, **kwargs) 310 311 functools.update_wrapper(with_closed_check, method) /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/cursor.py in execute(self, operation, parameters, job_id, job_config) 165 formatted_operation, parameter_types = _format_operation(operation, parameters) 166 self._execute( --&gt; 167 formatted_operation, parameters, job_id, job_config, parameter_types 168 ) 169 /shared-libs/python3.7/py/lib/python3.7/site-packages/google/cloud/bigquery/dbapi/cursor.py in _execute(self, formatted_operation, parameters, job_id, job_config, parameter_types) 203 self._query_job.result() 204 except google.cloud.exceptions.GoogleCloudError as exc: --&gt; 205 raise exceptions.DatabaseError(exc) 206 207 query_results = self._query_job._query_results DatabaseError: (google.cloud.bigquery.dbapi.exceptions.DatabaseError) 400 Syntax error: Expected end of input but got keyword FROM at [1:1] (job ID: d641b9df-ff28-4822-9ec8-e8044a117834) --Query Job SQL Follows-- | . | . | . | . | . | . | . | . | . | . | . | . | 1:from IPython.display import HTML 2: 3:HTML(&#39;&#39;&#39;&lt;script&gt; 4:code_show=true; 5:function code_toggle() { 6: if (code_show){ 7: $(&#39;div.input&#39;).hide(); 8: } else { 9: $(&#39;div.input&#39;).show(); 10: } 11: code_show = !code_show 12:} 13:$( document ).ready(code_toggle); 14:&lt;/script&gt; 15:&lt;form action=&#34;javascript:code_toggle()&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Click here to toggle on/off the raw code.&#34;&gt;&lt;/form&gt;&#39;&#39;&#39;) 16: 17: 18:select election_cycle, sum(dem_predicted) 19:from `nyu-cap-ae.final.tableau_final_market` 20:group by 1 21:limit 100; | . | . | . | . | . | . | . | . | . | . | . | . | [SQL: from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&#34;javascript:code_toggle()&#34;&gt;&lt;input type=&#34;submit&#34; value=&#34;Click here to toggle on/off the raw code.&#34;&gt;&lt;/form&gt;&#39;&#39;&#39;) select election_cycle, sum(dem_predicted) from `nyu-cap-ae.final.tableau_final_market` group by 1 limit 100;] (Background on this error at: https://sqlalche.me/e/14/4xp6) . There is supposed to be a built in visualization that shows below, but it doesn&#39;t work with Fastpages. Could be useful for quick and dirty adhoc visualizations in Deepnote while exploring data though. . _deepnote_run_altair(df_1, &quot;&quot;&quot;{&quot;$schema&quot;:&quot;https://vega.github.io/schema/vega-lite/v4.json&quot;,&quot;mark&quot;:{&quot;type&quot;:&quot;bar&quot;,&quot;tooltip&quot;:{&quot;content&quot;:&quot;data&quot;}},&quot;height&quot;:220,&quot;autosize&quot;:{&quot;type&quot;:&quot;fit&quot;},&quot;data&quot;:{&quot;name&quot;:&quot;placeholder&quot;},&quot;encoding&quot;:{&quot;x&quot;:{&quot;field&quot;:&quot;election_cycle&quot;,&quot;type&quot;:&quot;nominal&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:false}},&quot;y&quot;:{&quot;field&quot;:&quot;f0_&quot;,&quot;type&quot;:&quot;quantitative&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:true}},&quot;color&quot;:{&quot;field&quot;:&quot;f0_&quot;,&quot;type&quot;:&quot;quantitative&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:false}}}}&quot;&quot;&quot;) . Unfortunately, it doesn&#39;t work because fastpages doesn&#39;t recognize this command: . _deepnote_run_altair(df_1, &quot;&quot;&quot;{&quot;$schema&quot;:&quot;https://vega.github.io/schema/vega-lite/v4.json&quot;,&quot;mark&quot;:{&quot;type&quot;:&quot;bar&quot;,&quot;tooltip&quot;:{&quot;content&quot;:&quot;data&quot;}},&quot;height&quot;:220,&quot;autosize&quot;:{&quot;type&quot;:&quot;fit&quot;},&quot;data&quot;:{&quot;name&quot;:&quot;placeholder&quot;},&quot;encoding&quot;:{&quot;x&quot;:{&quot;field&quot;:&quot;election_cycle&quot;,&quot;type&quot;:&quot;nominal&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:false}},&quot;y&quot;:{&quot;field&quot;:&quot;f0_&quot;,&quot;type&quot;:&quot;quantitative&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:true}},&quot;color&quot;:{&quot;field&quot;:&quot;f0_&quot;,&quot;type&quot;:&quot;quantitative&quot;,&quot;sort&quot;:null,&quot;scale&quot;:{&quot;type&quot;:&quot;linear&quot;,&quot;zero&quot;:false}}}}&quot;&quot;&quot;) . Since that doesn&#39;t work, let&#39;s try using matplotlib . import matplotlib.pyplot as plt; plt.rcdefaults() import numpy as np import matplotlib.pyplot as plt objects = (&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;Perl&#39;, &#39;Scala&#39;, &#39;Lisp&#39;) y_pos = np.arange(len(objects)) performance = [10,8,6,4,2,1] plt.bar(y_pos, performance, align=&#39;center&#39;, alpha=0.5) plt.xticks(y_pos, objects) plt.ylabel(&#39;Usage&#39;) plt.title(&#39;Programming language usage&#39;) plt.show() . Yay, now it works! . &lt;/img&gt; Created in Deepnote .",
            "url": "https://blog.mapchange.com/fastpages/jupyter/2022/02/05/mapchange-test.html",
            "relUrl": "/fastpages/jupyter/2022/02/05/mapchange-test.html",
            "date": " • Feb 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Getting Started 👋",
            "content": "Deepnote in 5 Minutes . ### The Deepnote notebook 🏃 | ### Upload or connect your data 🔗 | ### Work with others 🤝 | ### Publish your work 📚 | Next Steps &#128099; . Go to your Dashboard to create your first project. | Say Hi in Deepnote Community! | If you ever need help, hit the question mark in the bottom left corner and chat with us! We&#39;re always happy to assist you. | &lt;/img&gt; Created in Deepnote .",
            "url": "https://blog.mapchange.com/2022/02/04/getting-started-with-deepnote.html",
            "relUrl": "/2022/02/04/getting-started-with-deepnote.html",
            "date": " • Feb 4, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://blog.mapchange.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://blog.mapchange.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://blog.mapchange.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.mapchange.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}